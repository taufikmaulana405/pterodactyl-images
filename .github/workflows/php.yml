name: Build and Push Docker Image PHP

on:
  workflow_dispatch:
  schedule:
    - cron: '0 17 1,15 * *' # Run on the 1st and 15th of each month at 17:00 UTC
  push:
    branches:
      - master
    paths:
      php/**

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # Package tag name
  PACKAGE_TAG: php
  # Tag Name default value
  DOCKER_IMAGE_TAG: none

permissions:
  actions: read
  packages: write

concurrency:
  group: php${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  push:
    name: "php${{ matrix.package_version }} on ${{ matrix.dockerfile }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package_version:
          - 7
          - 7.1
          - 7.2
          - 7.3
          - 7.4
          - 8
          - "8.0"
          - 8.1
          - 8.2
          - 8.3
          - 8.4
        dockerfile:
          - Dockerfile
          - nginx.Dockerfile

    steps:
      # Track and monitor the workflow runs, jobs and steps resource metrics.
      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          metric_frequency: 1
          proc_trace_sys_enable: true

      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Login to ${{ env.REGISTRY}} Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set tag docker image based on the Version of Package
      # If the matrix tag is "latest", set the Tag Docker Image to only Package
      # Otherwise, append the matrix tag to the Package + Version of Package
      - name: Set Tag Docker Image
        run: |
          echo "Package: ${{ env.PACKAGE_TAG }}"
          echo "Version: ${{ matrix.package_version }}"
          echo "Dockerfile: ${{ matrix.dockerfile }}"
          if [ "${{ matrix.dockerfile }}" = "nginx.Dockerfile" ]; then
            RESULT_TAG="${{ env.PACKAGE_TAG }}${{ matrix.package_version }}-nginx"
          else
            RESULT_TAG="${{ env.PACKAGE_TAG }}${{ matrix.package_version }}"
          fi
          echo "DOCKER_IMAGE_TAG=${RESULT_TAG}" >> $GITHUB_ENV
          echo "Docker Image Tag Successfully to: ${RESULT_TAG}"

      # **CACHE LOCAL DOCKER LAYERS <-> GITHUB ACTIONS CACHE**
      # - name: Sync cache Docker layers local to GitHub Actions cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ runner.temp }}/.buildx-cache
      #     key: ${{ env.PACKAGE_TAG }}_${{ matrix.package_version }}-${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ env.PACKAGE_TAG }}_${{ matrix.package_version }}-${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.PACKAGE_TAG }}
          file: ./${{ env.PACKAGE_TAG }}/${{ matrix.dockerfile }}
          # **CACHE LOCAL DOCKER LAYERS <-> GITHUB ACTIONS CACHE**
          # cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max,compression=zstd,compression-level=22
          push: true
          build-args: |
            PHP_VERSION=${{ matrix.package_version }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.DOCKER_IMAGE_TAG }}

      # **CACHE LOCAL DOCKER LAYERS <-> GITHUB ACTIONS CACHE**
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      # - name: Update new cache Docker layers
      #   run: |
      #     echo "Cleaning up old cache..."
      #     rm -rf ${{ runner.temp }}/.buildx-cache
      #     echo "Updating cache..."
      #     mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache
      #     echo "Cache updated."